// Prisma Schema //
generator client {
  provider = "prisma-client"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Models //
enum Role {
  USER
  ADMIN
  OPERATOR
  JUDGE
}

model Account {
  id           String  @id @default(cuid())
  username     String  @unique
  password     String
  name         String
  sessionToken String?
  teamId       String? @unique
  role         Role    @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team? @relation(fields: [teamId], references: [id])
}

model Team {
  id       String @id @default(cuid())
  teamName String
  schoolId String
  score    Int    @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account         Account?
  members         Member[]
  posts           Post[]
  solvedQuestions SolvedQuestion[]

  school School @relation(fields: [schoolId], references: [id])
}

model Member {
  id     String @id @default(cuid())
  name   String
  teamId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id])
}

model School {
  id         String  @id @default(cuid())
  schoolName String
  picName    String?
  picEmail   String?
  address    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams Team[]
}

// Post Models //
enum Level {
  SMP
  SMA
}

model Post {
  id          String  @id @default(cuid())
  postNumber  String
  picName     String
  description String?
  level       Level

  teams Team[]
}

// Question Models //
enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Question {
  id          String     @id @default(cuid())
  title       String
  description String
  image       String?
  difficulty  Difficulty

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  answers  Answer[]
  solvedBy SolvedQuestion[]
}

model Answer {
  id         String  @id @default(cuid())
  content    String
  questionId String
  isCorrect  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question Question @relation(fields: [questionId], references: [id])
}

model SolvedQuestion {
  id         String   @id @default(cuid())
  teamId     String
  questionId String
  createdAt  DateTime @default(now())

  team     Team     @relation(fields: [teamId], references: [id])
  question Question @relation(fields: [questionId], references: [id])

  @@unique([teamId, questionId])
}

// Contest Models //
enum ContestStatus {
  PENDING
  RUNNING
  FROZEN
  PAUSED
  FINISHED
}

model Contest {
  id                  String         @id @default(cuid())
  name                String
  startTime           DateTime
  endTime             DateTime
  pausedTime          DateTime?
  totalPausedDuration Int            @default(0)
  frozenLeaderboard   Json?
  statusBeforePause   ContestStatus?
  status              ContestStatus  @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
